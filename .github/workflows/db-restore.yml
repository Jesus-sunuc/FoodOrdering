name: Restore From Dump

on:
  workflow_dispatch:

jobs:
  restore_database:
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get db pod
        id: find_db
        run: |
          DB_POD=$(kubectl get pods -n lunchbox \
            --sort-by=.metadata.creationTimestamp \
            --no-headers | grep 'db-deployment' | grep 'Running' | tail -n1 | awk '{print $1}')
          echo "db_pod=$DB_POD" >> $GITHUB_OUTPUT

      - name: Delete pvc-debugger pod
        run: |
          kubectl delete pod pvc-debugger -n lunchbox --ignore-not-found

      - name: Create pvc-debugger pod
        run: |
          kubectl apply -n lunchbox -f kube/pvc-debug.yml

      - name: Get PVC debugger pod
        id: pvc_debug
        run: |
          sleep 5
          PVC_POD=$(kubectl get pods -n lunchbox \
            --no-headers | grep 'pvc-debugger' | grep 'Running' | awk '{print $1}')
          echo "pvc_pod=$PVC_POD" >> $GITHUB_OUTPUT

      - name: Get latest backup filename
        id: get_dump
        run: |
          DUMP_NAME=$(kubectl exec -n lunchbox pvc-debugger -- ls -t /backups | head -n 1)
          echo "dump_name=$DUMP_NAME" >> $GITHUB_OUTPUT
        
      - name: Copy dump from backup pod
        run: |
          kubectl cp lunchbox/pvc-debugger:/backups/db_backup.sql -c debugger ./dump.sql
          # kubectl cp lunchbox/${{ steps.pvc_debug.outputs.pvc_pod }}:/backups/${{ steps.get_dump.outputs.dump_name }} ./dump.sql

      - name: Run after fail
        if: always()
        run: |
          echo "PVC pod: ${{ steps.pvc_debug.outputs.pvc_pod }}"
          echo "Dump name: ${{ steps.get_dump.outputs.dump_name }}"

      - name: Restore database
        run: |
          echo "PVC pod: ${{ steps.pvc_debug.outputs.pvc_pod }}"
          echo "Dump name: ${{ steps.get_dump.outputs.dump_name }}"
          DB_POD=$(kubectl get pods -n lunchbox --no-headers | awk '$1 ~ /db-deployment/ && $3 == "Running" {print $1}' | tail -n1 | tr -d '\r\n')
          kubectl cp -n lunchbox ./dump.sql lunchbox/$DB_POD:/tmp/dump.sql
          kubectl exec -n lunchbox -i $DB_POD -- \
          psql -U app_admin -d postgres -f /tmp/dump.sql
